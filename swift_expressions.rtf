{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 LucidaGrande;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red28\green30\blue36;\red255\green255\blue255;\red135\green134\blue154;
\red249\green249\blue249;\red34\green88\blue157;\red0\green0\blue120;\red234\green234\blue234;\red0\green0\blue0;
\red37\green127\blue159;\red107\green0\blue1;\red244\green244\blue244;\red235\green236\blue237;\red67\green67\blue67;
\red109\green109\blue109;}
{\*\expandedcolortbl;;\cssrgb\c14510\c15686\c18824;\cssrgb\c100000\c100000\c100000;\cssrgb\c60000\c60000\c66667;
\cssrgb\c98039\c98039\c98039;\cssrgb\c16863\c42745\c67843;\cssrgb\c0\c0\c54510;\cssrgb\c93333\c93333\c93333;\cssrgb\c0\c0\c0;
\cssrgb\c16863\c56863\c68627;\cssrgb\c50196\c0\c0;\cssrgb\c96471\c96471\c96471;\cssrgb\c93725\c94118\c94510;\cssrgb\c33333\c33333\c33333;
\cssrgb\c50196\c50196\c50196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs64 \cf2 \cb3 \expnd0\expndtw0\kerning0
Swift Expressions, Statements and Code blocks
\f1\b\fs32 \cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 In this article, you will learn about Swift expressions, statements and blocks.\cb1 \
\pard\pardeftab720\partightenfactor0

\b0 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs38\fsmilli19200 \cf2 \cb5 Table of Contents\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\b0\fs32 \cf6 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Swift Expressions\cf2 \cb1 \
\ls1\ilvl0\cf6 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Swift Statements\cf2 \cb1 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf6 \cb5 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Simple statements\cf2 \cb1 \
\ls1\ilvl1\cf6 \cb5 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Compiler control statements\cf2 \cb1 \
\ls1\ilvl1\cf6 \cb5 \kerning1\expnd0\expndtw0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
Control flow statements\cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf6 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Swift Code Blocks\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 In the previous chapter, we used expressions, statements and blocks without explaining what it is although it's used in every Swift program.\cb1 \
\cb3 After you know what variables, operators are it will be easier to understand these concepts which are explained below in detail.\cb1 \
\
\pard\pardeftab720\partightenfactor0

\b\fs51\fsmilli25600 \cf2 \cb3 Swift Expressions\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 An expression is a combination of values, constants, {\field{\*\fldinst{HYPERLINK "https://www.programiz.com/swift-programming/variables-constants-literals"}}{\fldrslt \cf6 variables}}, {\field{\*\fldinst{HYPERLINK "https://www.programiz.com/swift-programming/operators"}}{\fldrslt \cf6 operators}}, and {\field{\*\fldinst{HYPERLINK "https://www.programiz.com/swift-programming/functions"}}{\fldrslt \cf6 functions}} that produces another value. To be more simpler, an expression is any valid code that returns a value.\cb1 \
\cb3 The resulting value is usually one of {\field{\*\fldinst{HYPERLINK "https://www.programiz.com/swift-programming/data-types"}}{\fldrslt \cf6 Swift Data Types}} e.g integer, string, and float or more complex data type as functions.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs44\fsmilli22400 \cf2 \cb3 Example 1: Swift Expressions in a Program\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\b0\fs30 \cf7 \cb8 let\cf2  someValue:\cf10 Int\cf2  = \cf11 12\cf2 \
\cf7 if\cf2  \cf7 true\cf2  && \cf7 false\cf2 \{\
    \cf7 print\cf2 (\cf11 "This is false"\cf2 )\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 In the above program, here are the expressions:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs30 \cf2 \cb12 let someValue:Int = 12 ,\
true && false and \
"This is false"\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 The expression 
\f3\fs27\fsmilli13760 \cb13 let someValue:Int = 12
\f1\fs32 \cb3  uses the assignment operator 
\b\fs31\fsmilli15680 \cf14 =
\b0\fs32 \cf2  to assign value twelve in the variable 
\f3\fs27\fsmilli13760 \cb13 someValue
\f1\fs32 \cb3  and denotes the value (12) in memory.\cb1 \
\cb3 The expression 
\f3\fs27\fsmilli13760 \cb13 true && false
\f1\fs32 \cb3  uses the logical and operator 
\f3\fs27\fsmilli13760 \cb13 &&
\f1\fs32 \cb3  to combine two boolean values 
\f3\fs27\fsmilli13760 \cb13 true
\f1\fs32 \cb3  and 
\f3\fs27\fsmilli13760 \cb13 false
\f1\fs32 \cb3  without assigning the result 
\f3\fs27\fsmilli13760 \cb13 false
\f1\fs32 \cb3  to a variable/constant.\cb1 \
\cb3 Similarly, 
\f3\fs27\fsmilli13760 \cb13 "This is false"
\f1\fs32 \cb3  represents a string expression.\cb1 \
\
\pard\pardeftab720\partightenfactor0

\b\fs51\fsmilli25600 \cf2 \cb3 Swift Statements\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 A statement is a command that defines an action a program should take. Common actions include declaring variables, assigning values, calling methods, transfer the control flow of execution, looping through collections, apply a condition etc.\cb1 \
\cb3 The difference between statements and expressions is that statements do not return results and are executed for some action, while expressions always return a result.\cb1 \
\cb3 If you are already familiar with other programming language like C, C ++, Java a semicolon 
\b\fs31\fsmilli15680 \cf14 (;)
\b0\fs32 \cf2  must appear at the end of the statement.\cb1 \
\cb3 However in Swift, it's optional to write semicolon at the end of the statement. However, you need to include it if separate multiple statements should appear on the same line.\cb1 \
\cb3 Lets see a basic example of statements that you are already familiar with:\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs44\fsmilli22400 \cf2 \cb3 Example 2: Swift statement\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\b0\fs30 \cf7 \cb8 print\cf2 (\cf11 "Hello, World!"\cf2 )\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 Or even this is valid:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs30 \cf7 \cb8 print\cf2 (\cf11 "Hello, World!"\cf2 );\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 In this case, the command print means "show on the screen". When you write this code on a Playground, you are giving command to output 
\f3\fs27\fsmilli13760 \cb13 Hello, World!
\f1\fs32 \cb3  in the console.\cb1 \
\
\cb3 There are three types of Statements in Swift.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs44\fsmilli22400 \cf2 \cb3 1. Simple Statements\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 These are the most common types of statements in swift that consist of either an expression or a declaration.\cb1 \
\pard\pardeftab720\partightenfactor0

\b\fs38\fsmilli19200 \cf2 \cb3 Example 3: Simple statement in Swift\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\b0\fs30 \cf7 \cb8 let\cf2  someValue:\cf10 Int\cf2  = \cf11 12\cf2 \
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 It is a simple expression that assigns value 12 to constant 
\f3\fs27\fsmilli13760 \cb13 someValue
\f1\fs32 \cb3  as well as a statement that commands to assign value 12 in constant 
\f3\fs27\fsmilli13760 \cb13 someValue
\f1\fs32 \cb3 .\cb1 \
\
\pard\pardeftab720\partightenfactor0

\b\fs44\fsmilli22400 \cf2 \cb3 2. Compiler Control Statements\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 These type of statements allow the program to change aspects of the compiler\'92s behavior. Swift has two compiler control statements which are listed below:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b\fs31\fsmilli15680 \cf14 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Conditional compilation block
\b0\fs32 \cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
A conditional compilation block allows code to be only compiled depending on the value of one or more compilation conditions. Every conditional compilation block begins with the 
\f3\fs27\fsmilli13760 \cb13 #if
\f1\fs32 \cb3  and ends with 
\f3\fs27\fsmilli13760 \cb13 #endif
\f1\fs32 \cb3 . A simple conditional compilation block has the following form: 
\f3\fs30 \cb12 #if compilation condition\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Statements\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
#endif\uc0\u8232 
\f1\b\fs31\fsmilli15680 \cf14 \cb3 Example 4: Conditional control statement
\b0\fs32 \cf2 \cb1 \uc0\u8232 
\f3\fs25\fsmilli12900 \cf15 \cb13 #if swift(>=4.0)\cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
print\cf2 (\cf11 """\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf11 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
    Hello,\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
    World\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
    """\cf2 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
#endif
\fs30 \cf2 \cb8 \uc0\u8232 
\f1\fs32 \cb3 The condition 
\f3\fs27\fsmilli13760 \cb13 swift(>=4.0)
\f1\fs32 \cb3  is applied at the statement 
\f3\fs27\fsmilli13760 \cb13 #if #endif
\f1\fs32 \cb3  . As a result, the 
\f3\fs27\fsmilli13760 \cb13 print
\f1\fs32 \cb3  statement is executed only if swift version is greater than or equal to 4.0 at compile time.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\'a0\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b\fs31\fsmilli15680 \cf14 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Line control statement
\b0\fs32 \cf2 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
This type of control statements is intended to be used by tools that auto-generate source code. Therefore, you would never use it as a beginner. You can learn more about it in: Swift Line Control Statement.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs44\fsmilli22400 \cf2 \cb3 3. Control Flow Statements\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 This statements are used to control the flow of execution in a program. There are several types of control flow statements in Swift.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\b\fs31\fsmilli15680 \cf14 \cb3 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Loop statements
\b0\fs32 \cf2 : This statement allows a block of code to be executed repeatedly. E.g: for-in, while, repeat while, etc.\cb1 \
\ls3\ilvl0
\b\fs31\fsmilli15680 \cf14 \cb3 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Branch statements
\b0\fs32 \cf2 : This statement allows a certain block of code to be executed only when certain conditions are met. E.g: if else, guard, switch, etc.\cb1 \
\ls3\ilvl0
\b\fs31\fsmilli15680 \cf14 \cb3 \kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Control transfer statements
\b0\fs32 \cf2 : This statement allows a way to alter the order in which code is executed. E.g: break, continue, fallthrough, throw, return, etc.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs51\fsmilli25600 \cf2 \cb3 Swift Code Blocks\cb1 \
\pard\pardeftab720\partightenfactor0

\b0\fs32 \cf2 \cb3 A code block is a group of statements (zero or more) that is enclosed in curly braces \{ \}.\cb1 \
\cb3 The statements inside a code block include declarations, expressions, and other kinds of statements. They are executed in order of their appearance in source code.\cb1 \
\cb3 It has the following form:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs30 \cf2 \cb12 \{\
	statements\
\}\
\pard\pardeftab720\partightenfactor0

\f1\b\fs44\fsmilli22400 \cf2 \cb3 Example 5: Swift code block\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\b0\fs30 \cf7 \cb8 if\cf2  \cf7 true\cf2 \{\
\pard\pardeftab720\partightenfactor0
\cf15 //start of block\cf2 \
	\cf7 let\cf2  sum = \cf11 2\cf2 +\cf11 3\cf2 \
	\cf7 print\cf2 (\cf11 "Result is \\(sum)"\cf2 )\
\cf15 //end of block\cf2 \
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf2 \cb3 There are two statements 
\f3\fs27\fsmilli13760 \cb13 let sum = 2+3
\f1\fs32 \cb3  and 
\f3\fs27\fsmilli13760 \cb13 print("Result is \\(sum)")
\f1\fs32 \cb3  inside the block above.}